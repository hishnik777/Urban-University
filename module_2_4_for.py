# Задача "Всё не так уж просто":

# Дан список чисел numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]
# Используя этот список, составьте второй список primes, содержащий только простые числа.
# А так же третий список not_primes, содержащий все непростые числа.
# Выведите списки primes и not_primes на экран(в консоль).

"""Пункты задачи:
Создайте пустые списки primes и not_primes.
При помощи цикла for переберите список numbers.
Напишите ещё один цикл for (вложенный), где будут подбираться делители для числа из 1ого цикла.
Отметить простоту числа можно переменной is_prime, записав в неё занчение True перед проверкой.
В процессе проверки на простоту записывайте числа из списка numbers в списки primes и not_primes в зависимости от значения переменной is_prime после проверки (True - в prime, False - в not_prime).
Выведите списки primes и not_primes на экран(в консоль)."""

"""Примечания:
Учтите, что число 1 не является ни простым, ни составным числом, поэтому оно отсутствует в конечных списках.
Для проверки на простоту числа вам нужно убедиться, что выбранное число не делиТСя ни на что в диапазоне от 2 до этого числа (не включительно).
Попробуйте оптимизировать (ускорить) процесс выяснения простоты числа при помощи оператора break, когда найдёте делитель. (Не обязательно)
Переменные, меняющИе своё булевое состояние на противоположное в процессе проверки, как is_prime, в кругах разработчиков называются перменными-флагами(flag)."""

# Решение:
	
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]  # исходный список
primes = []  # пустой список, в который будем помещать только простые числа из исходного списка numbers.
not_primes = []  # пустой список, в который будем помещать только непростые числа из исходного списка numbers.

# При помощи цикла for переберем список numbers:
for i in numbers:
	is_prime = True and i != 1   # создадим перменную-флаг is_prime для проверки чисел i из списка numbers на простоту и присвоим ей значение True. При этом, исключим из списка единицы, так как 1 не является ни простым, ни составным числом (т.е. числа i не должны быть равны 1).
	for j in range(2, i):   # создадим ещё один цикл for (вложенный), где будут подбираться делители j для числа i из 1ого цикла. При этом, для проверки на простоту  числа i будем использовать делители j в диапазоне от 2 до этого числа i (не включительно).
# Если число i из списка numbers делится без остатка на j (остаток от деления равен нулю) , то переменная-флаг is_prime принимает значение False (т.е. число i  непростое). В таком случае, с помощью метода .append мы добавляем выбранное число i в созданный ранее пустой список not_primes:
		if i % j == 0 : 
			is_prime = False
			not_primes.append(i)
			break # для ускорения процесса выяснения непростоты числа i и исключения повторного его добавления в список not_primes применим оператор break, который прервет цикл после первого найденного делителя j.
# Если в процессе проверки числа i на простоту перменная-флаг is_prime остается истинной (принимает значение True), то есть уловие i % j == 0 не выполняется (число i не делится без остатка ни на что, кроме самого себя и единицы), то мы добавляем i в список primes:
	if is_prime :
		primes.append(i)
# Выведем списки primes (простые числа) и not_primes (непростые числа) на экран (в консоль):
print('primes:', primes)
print('not_primes:', not_primes)
