"""
Задание "Слишком древний шифр":

Перед вами появились ворота (выход из ловушки) с двумя каменными вставками для чисел.
В первом поле камни с числом менялись постоянно (от 3 до 20) случайным образом, а второе было всегда пустым.
Во вторую вставку нужно было написать те пары чисел друг за другом, чтобы число из первой вставки было кратно (делилось без остатка) сумме их значений.
Пример:
9 - число из первой вставки
1218273645 - нужный пароль (1 и 2, 1 и 8, 2 и 7, 3 и 6, 4 и 5 - пары; число 9 кратно сумме каждой пары)

Составьте алгоритм, используя циклы, чтобы в независимости от введённого числа n (от 3 до 20) программа выдавала нужный пароль result, для одного введённого числа.

Все пароли для чисел от 3 до 20 (для сверки):
3 - 12
4 - 13
5 - 1423
6 - 121524
7 - 162534
8 - 13172635
9 - 1218273645
10 - 141923283746
11 - 11029384756
12 - 12131511124210394857
13 - 112211310495867
14 - 1611325212343114105968
15 - 1214114232133124115106978
16 - 1317115262143531341251161079
17 - 11621531441351261171089
18 - 12151811724272163631545414513612711810
19 - 118217316415514613712811910
20 - 13141911923282183731746416515614713812911

Примечания:
Можно использовать как цикл for, так и цикл while
Пары чисел подбираются от 1 до 20 для текущего числа.
Пары являются уникальными
"""

# Решение:

# Создадим поле ввода для числа "n" (первая каменная вставка):
n = int(input("Введите число n (от 3 до 20): "))	
# Создадим пустой список "cypher_list" для помещения в него элементов шифра:
cypher_list = []
# Создадим функцию "cypher" для вычисления нужного шифра:
def cypher() :
	set_numbers = [] # - пустой список для хранения в нем множеств чисел (пар) от 1 до 20, сумме которых кратно число "n"
	for i in range(1, 21): # цикл для перебора значений первого числа пары (от 1 до 20)
		for j in range(1, 21): # цикл для перебора значений второго числа пары (от 1 до 20)
# Зададим условие цикла "for":
# 1) введенное число "n" должно делиться на сумму чисел пары без остатка
# 2) числа "i" и "j" в паре не должны быть равны (должны быть уникальны)
# 3) пары чисел "i" и "j" (множества {i,j}) не должны повторяться (должны быть уникальны)
			if n % (i + j) == 0 and i != j and {i,j} not in set_numbers :
# Добавим полученные пары чисел (множества {i,j}) в список	"set_numbers":
				set_numbers.append({i,j})
# С помощью цикла "for" переберем пары чисел (множества {i,j}) из списка "set_numbers", преобразуем их в списки ([i,j]), отсортируем и добавим в список "cypher_list":
	for i in set_numbers:
		pair_numbers = list(i)
		pair_numbers.sort()
		cypher_list.append(pair_numbers)
#	print(cypher_list) # - если вывести в консоль значение переменной "cypher_list", то получим список, элементами которого являются вложенные списки [i,j], содержащие элементы (пары чисел) нужного нам шифра
# Для получения готового шифра осуществим с помощью цикла "for" слияние вложенных списков [i,j], после чего получим итоговый список "result", содержащий нужный нам шифр (пароль):
	result = [element for pair_numbers in cypher_list for element in pair_numbers]
# В целях читабельности результата вывода программы воспользуемся f-строкой и оператором "*" (для распаковки списка "result"):
	print(f'Нужный пароль для числа "{n}":')
	print(*result)
# Добавим условие (конструкции "if", "elif"), при котором будет работать наш код (функция "cypher()"):
# Введенное число "n" должно быть целым числом в диапазоне от 3 до 20.
# При вводе числа, значение которого находится за пределами указанного диапазона (т.е. меньше 3 или больше 20), программа выдаст соответствующее предупреждение.
# При вводе в консоль любых других данных (нецелого числа, строки и т.д.) программа выдаст ошибку.
if n >= 3 and n <= 20 :
	cypher()
else:
	print("Введенное число n выходит за пределы диапазона от 3 до 20")
